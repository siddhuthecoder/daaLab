#include <stdio.h>
#include <limits.h>
#define V 4 // Number of cities
int minTourCost = INT_MAX;
int visited[V];
int graph[V][V] = {
{0, 10, 15, 20},
{10, 0, 35, 25},
{15, 35, 0, 30},
{20, 25, 30, 0}
};
void tsp(int pos, int count, int tourLength) {
if (count == V) {
// If all cities have been visited, return to the starting city.
tourLength += graph[pos][0];
if (tourLength < minTourCost) {
minTourCost = tourLength;
}
}
for (int i = 0; i < V; i++) {
if (!visited[i]) {
visited[i] = 1; // Mark the city as visited
tsp(i, count + 1, tourLength + graph[pos][i]);
visited[i] = 0; // Mark the city as unvisited (backtracking)
}
}
}
int main() {
for (int i = 0; i < V; i++) {
visited[i] = 0; // Initialize all cities as unvisited
}
visited[0] = 1; // Start from the first city
tsp(0, 1, 0);
printf("Minimum tour cost: %d\n", minTourCost);
return 0;
}